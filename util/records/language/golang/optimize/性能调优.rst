.. highight:: rst

.. _records_language_golang_performance:


性能调优
---------


编译优化
==========

    - 逃逸分析
    - 内联
    - 死码消除

逃逸分析
:::::::::

什么是逃逸
'''''''''''

    在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针

    逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：
    1. 是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上
    2. 即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上

    逃逸分析是在编译阶段确定的，而不是在运行阶段

为什么需要逃逸分析
''''''''''''''''''''''

如果变量都分配到堆上了会出现什么事情？例如：

    垃圾回收（GC）的压力不断增大
    申请、分配、回收内存的系统开销增大（相对于栈）
    动态分配产生一定量的内存碎片

总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道


逃逸的确定
""""""""""""""
 第一，通过编译器命令，就可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器：

``-m`` 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了

``-l`` 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰
``$ go build -gcflags '-m -l' main.go``

第二，通过反编译命令查看 
``$ go tool compile -S main.go``

go 逃逸例子
'''''''''''

1. 指针

.. code-block:: go

    type User struct {
    ID     int64
    Name   string
    Avatar string
    }

    func GetUserInfo() *User {
        return &User{ID: 13746731, Name: "EDDYCJY", Avatar: "https://avatars0.githubusercontent.com/u/13746731"}
    }

    func main() {
        _ = GetUserInfo()
    }

因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了
如果去掉User前的取址符 ``&``, 那么数据会被分配到栈上，等待方法结束回收

2. 未确定类型

.. code-block:: go

    func main() {
        str := new(string)
        *str = "EDDYCJY"

        fmt.Println(str)
    }

如果没有Println方法，那么数据会被分配到栈上，因为没有被其他使用
如果添加Pringln方法，由于方法签名 ``func Println(a ...interface{}) (n int, err error)`` 在编译阶段，如果获知具体类型，因此会被分配到heap上


3. 参数泄漏

.. code-block:: go

    type User struct {
        ID     int64
        Name   string
        Avatar string
    }

    func GetUserInfo(u *User) *User {
        return u
    }

    func main() {
        _ = GetUserInfo(&User{ID: 13746731, Name: "EDDYCJY", Avatar: "https://avatars0.githubusercontent.com/u/13746731"})
    }


编译结果： leaking param 的表述，它说明了变量 u 是一个泄露参数。结合代码可得知其传给 GetUserInfo 方法后，没有做任何引用之类的涉及变量的动作，直接就把这个变量返回出去了。因此这个变量实际上并没有逃逸，它的作用域还在 main() 之中，所以分配在栈上


``到处都用指针传递并不一定是最好的，要用对``

内联
::::::::

内联只对叶子函数有效，叶子函数是不调用其他函数的。这样做的理由是:

    - 如果你的函数做了很多工作，那么前序开销可以忽略不计。
    - 小函数为相对较少的有用工作付出固定的开销。这些是内联目标的功能，因为它们最受益。

另外就是严重的内联会使得堆栈信息更加难以跟踪

使用-gcflags=-l标识调整内联级别。

    1. -gcflags=-l，禁用内联。
    2. 什么都不做，常规的内联
    3. -gcflags='-l -l' 内联级别2，更积极，可能更快，可能会制作更大的二进制文件。
    4. -gcflags='-l -l -l' 内联级别3，再次更加激进，二进制文件肯定更大，也许更快，但也许会有 bug。
    5. -gcflags=-l=4 (4个 -l) 在 Go 1.11 中将支持实验性的 中间栈内联优化。
 
死码消除
:::::::::

减少循环和分支产生的代码数量，这些循环和分支被证明是不可到达的

