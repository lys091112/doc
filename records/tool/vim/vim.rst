.. _vim-learn:

Vim 基础命令
-------------

帮助文档
~~~~~~~~~~~~~~
::

    :h key-notation 显示键映射的标识
    :message 查看vim输出的日志信息
    vim --startuptime log.txt 查看vim启动时的耗时输入到log.txt中

简单配置命令
~~~~~~~~~~~~~~~

::

    * set noexpandtab  #关闭tab和控制的转换
    * nmap, nnoremap的区别:
        nmap的映射可能会形成循环，如：nmap dd o<esc>jddk, 本意是删除一行，但实际会死循环，需要<c-c>进行介绍
        nnoremap 可以防止死循环
    * set cursorcolumn 高亮当前列
    * set cursorline  高亮光标行

编辑行 
~~~~~~

::    

    * 添加一行
        1.按 C-v，进入 Visual Block mode，按 G 到末行，按 $ 到所有行的行尾，按 A 在行尾添加,
        输入添加的内容（只有第一行会显示）， 按 <ESC> 退出编辑。
        完整命令如下： C-V G$A = models.CharField(maxlength=XXX)<ESC>

        2.将行尾 $ 替换为所需内容。命令如下： :%s/$/ = models.CharField(maxlength=XXX)

    * 删除一行
            C-v,移动光标，选择需要删除的区域，按d进行删除
        
        3. 一次插入多个相同的字符。 
            命令: 10i* //表示在该位置上插入10个*
                  10o### //表示在该行下方插入10行### 
            其他组合命令可以自己去定义
        4. Unicode字符插入 方式一：CTRL+v+{unicode码} <C-v>065 十进制代表A  <C-v>U9690 隐, 详情可以查看:h i_CTRL-v_digit  ga命令可以显示字符的进制码 
           方式二：使用而合字母，CTRL+K+{code1}{code2} 详情:h digraph 

    * 正则替换
        1. %s/\([a-z]\)_\([a-z]\)/\1\U\2/gc #下划线分隔改为驼峰命名 \1 \2 匹配命中的第一、二个单词
        2. %s/struct \(\U\)/struct \U\1/gc
        3. %s/struct \(\w\)\(\w\+\)_\(\w\)\(\w\+\)/\1\L\2\U\3\L\4/gc  # \U则是转换大写。\L则是转换小写。\w是匹配任意大小写字目、数字、下划线
        4. 删除行尾空格：:%s/\s+$//g
        5. 删除行首多余空格：%s/^\s*// 或者 %s/^ *//
        6. 删除沒有內容的空行：%s/^$// 或者 g/^$/d
        7. 删除包含有空格组成的空行：%s/^\s*$// 或者 g/^\s*$/d
        8. 删除以空格或TAB开头到结尾的空行：%s/^[ |\t]*$// 或者 g/^[ |\t]*$/d


vim 宏录制
~~~~~~~~~~~~

::

    1.把光标定位在第一行；
    2.在normal模式下输入qa(当然也可以输入qb, qc, etc，这里的a, b, c是指寄存器名称，vim会把录制好的宏放在这个寄存器中)；
    3.正常情况下，vim的命令行会显示“开始录制”的字样，这时候，把光标定位到第一个字符（按0或者|），再按x删除，按j跳到下一行；
    4.normal模式下输入q，结束宏录制。
    
    执行：移动到需要操作的行，在normal模式下数据@a， 7@a执行7行

光标移动
~~~~~~~~~~~

::

    * 单词移动：
        W w 移动到下个单词开头 
        E e 移动到下一个单词的结尾 
        B b 上一个单词开头
    * 行移动
        + 移动到下一行开头 
        - 移动到下一行几位
    * 滚屏
        <C-f> 向下滚动一屏
        <C-b> 向上滚动一屏
        <C-d> 向下滚动一屏
        <C-u> 向上滚动一屏
        <C-y>向下滚动一行
        <C-e> 向下滚动一行
    * 屏幕中移动
        H 屏幕顶端(high)
        M 屏幕中央(middle)
        L 屏幕底端(low)
    * 文本块移动
         (  移动到当前句子开头
         )  移动到下一句子开头
         {  移动到当前段开头
         }  移动到下一段开头
         [[ 移动到这一节开头
         ]] 移动到下一节开头
    * 屏幕行和实际行
        gj,gk,g0,g^在移动行符前加g,表示移动一个屏幕行
    * 单词和字串
        w,b,e,ge 仅能在单词见跳转
        W,B,E,GE 可以在字串中跳转
        例如: we're 其中we , re 分别代表一个单词,而他们整体是一个字串
        we're -(cwyou)-> you're we're-(cWit's)->it's

    * 跳动到上一次和下一次的位置
      Ctrl+I,Ctrl+O 光标移到下一次和上一次的地方
    * 其他
        ^ 移动到当前行的第一个非空格处
        <C-g> 显示当前行信息
        g<C-g>显示当前行列的详细信息
        20|跳跃到当前行第20列
        20G跳跃到文本的第20行

折叠
~~~~~

::
    
    zfap 折叠一段文字
    zf 创建折叠行
    zo 打开折叠行
    zc 关闭折叠


文本选择
~~~~~~~~~

文本对象由两个字符组成,第一个字符永远是i或a,以 i 开头的文本对象会选择分隔符内部的文本,而以 a 开头的文本对象则会选择包括分隔符在内的整个文本。为了便于记忆,可以把 i 想成“inside”,而把 a 想成“around” 或“all”。

+----------+-------------------------------+
| 文本对象 | 选择区域                      |
+==========+===============================+
| a) 或 ab | 一对圆括号 (parentheses)      |
+----------+-------------------------------+
| i) 或 ib | 圆括号 (parentheses) 内部     |
+----------+-------------------------------+
| a} 或 aB | 一对花括号 {braces}           |
+----------+-------------------------------+
| i} 或 iB | 花括号 {braces} 内部          |
+----------+-------------------------------+
| a]       | 一对方括号 [brackets]         |
+----------+-------------------------------+
| i]       | 方括号 [brackets] 内部        |
+----------+-------------------------------+
| a>       | 一对尖括号 <angle brackets>   |
+----------+-------------------------------+
| i>       | 尖括号 <angle brackets> 内部  |
+----------+-------------------------------+
| a'       | 一对单引号 'single quotes'    |
+----------+-------------------------------+
| i'       | 单引号 'single quotes' 内部   |
+----------+-------------------------------+
| a"       | 一对双引号 "double quotes"    |
+----------+-------------------------------+
| i"       | 双引号 "double quotes" 内部   |
+----------+-------------------------------+
| a`       | 一对反引号 `backticks`        |
+----------+-------------------------------+
| i`       | 反引号 `backticks` 内部       |
+----------+-------------------------------+
| at       | 一对 XML 标签 <xml>tags</xml> |
+----------+-------------------------------+
| it       | XML 标签内                    |
+----------+-------------------------------+

**Vim 的文本对象分为两类:**
一类是操作分隔符的文本对象,如 i) 、 i" 和 it ;另一类用于操作文本块,如单词、句子和段落

+------------+---------------------+
|  文本对象  |  选择范围           |
+============+=====================+
|  iw        |  当前单词           |
+------------+---------------------+
|  aw        |  当前单词及一个空格 |
+------------+---------------------+
|  iW        |  当前字串           |
+------------+---------------------+
|  aW        |  当前字串及一个空格 |
+------------+---------------------+
|  is        |  当前句子           |
+------------+---------------------+
|  as        |  当前句子及一个空格 |
+------------+---------------------+
|  ip        |  当前段落           |
+------------+---------------------+
|  ap        |  当前段落及一个空行 |
+------------+---------------------+

设置标记,快速返回`{mark}
::::::::::::::::::::::::::::

Command :  mm 设置标记m, `m跳转到m`

Ctrl + O 返回上次跳转的位置

::

    +----------+----------------------------------+
    | 位置标记 | 跳转到                           |
    +==========+==================================+
    | ``       | 当前文件中上次跳转动作之前的位置 |
    +----------+----------------------------------+
    | `.       | 上次修改的地方                   |
    +----------+----------------------------------+
    | `^       | 上次插入的地方                   |
    +----------+----------------------------------+
    | `[       | 上次修改或复制的起始位置         |
    +----------+----------------------------------+
    | `]       | 上次修改或复制的结束位置         |
    +----------+----------------------------------+
    | `<       | 上次高亮选区的起始位置           |
    +----------+----------------------------------+
    | `>       | 上次高亮选区的结束位置           |
    +----------+----------------------------------+


其他基本命令
~~~~~~~~~~~~

::

    * 删除
        d0 删除光标到本行开头等同于d0+i
        d`$` 删除光标到本行结尾
    * 字符替换
        R  连续替换单词
        ~  更改大小写
        cw cb 从光标处修改单词开头或末尾
        c$ 修改到本行末尾
        C  同上
        cc 删除本行，从头修改
        S  功能同上
        s  删除光标所在字符，然后插入
    * 恢复
        u  撤销上次命令
        U  恢复整行
        .  重复执行
        e! 全文恢复
        <C-r> 重做,（用于执行u后的还原）
    * v (选中)->/ge<CR>hd 删除从选中单词到ge前的部分
      v -> d/ge<CR> d{motion} 查询的是一个开动作

高级使用
~~~~~~~~~

::
    1. <C-R>{register}
        " 在插入模式下，按<C-R>=,会在下方的命令行出现等号，将要执行的表达式写在等号后( =后的命令放入到寄存器)，并在<CR>后自动执行
        "<C-R>=strftime('%Y-%m-%d %H:%M:%S') 插入系统时间
        'inoremap <buffer> <silent> '.key." <C-R>=AutoPairsInsert('".escaped_key."')<CR>"




Ex命令
~~~~~~~~

::

    * Ex基本命令
        :[range]delete [x]               #删除指定范围内的行[到寄存器 x 中]
        :[range]yank [x]                 #复制指定范围的行[到寄存器 x 中]
        :[line]put [x]                   #在指定行后粘贴寄存器 x 中的内容
        :[range]copy {address}           #把指定范围内的行拷贝到 {address} 所指定的行之下
        :[range]move {address}           #把指定范围内的行移动到 {address} 所指定的行之下
        :[range]join                     #连接指定范围内的行
        :[range]normal {commands}        #对指定范围内的每一行执行普通模式命令 {commands}
        :[range]substitute/{pattern}/{string}/[flags] #把指定范围内出现{pattern}的地方替换为{string}
        :[range]global/{pattern}/[cmd]   #对指定范围内匹配{pattern}的所有行,在其上执行 Ex 命令{cmd}

    * 自动补全Ex  
        :col<C-d> 会显示《 color colorscheme
        补全的方式有
            * set wildmode=longes,list     #类似与shell的方式
            * set wildmode                 #类似与zsh的方式
              set wildmode=full
    * 历史 set history=200
    * 运行shell 
            * :shell 启动一个 shell (输入 exit 返回 Vim)
            * :!{cmd} 在 shell 中执行 {cmd}
            * :read !{cmd} 在 shell 中执行 {cmd} ,并把其标准输出插入到光标下方
            * :[range]write !{cmd} 在 shell 中执行 {cmd} ,以 [range] 作为其标准输入
            * :[range]!{filter} 使用外部程序 {filter} 过滤指定的 [range]
                demo:
                    * :read !{cmd}                #将当前命令输出读入到缓冲区
                    * :write !sh                  #将缓冲区的内容输出给外部的sh命令做标准输入
                    * :write ! sh                 #同上
                    * :write! sh                  #将缓冲区的内容输出到sh文件

Ex命令
~~~~~~~

::

    * :[range]copy[address] 例如:6copy. 将第六行copy导当前行(copy 可简写位t,co)
        :6t. 把第 6 行复制到当前行下方
        :t6 把当前行复制到第 6 行下方
        :t. 为当前行创建一个副本(类似于普通模式下的 yyp)
        :t$ 把当前行复制到文本结尾
        :'<,'>t0 把高亮选中的行复制到文件开头
    * [range]move[address] 同上
    * :%normal A;  为全文所有行结尾添加;  :%normal I// 注释 :'<,>'normal I/

文件
~~~~~~

::

    edit
        :edit %<Tab> %代表缓冲区完整文件路径
        :edit %:h<Tab> %:h代表当前路径
        :edit %:h<Tab>M<Tab> 在当前路径下寻找M开头的文件
    :find
        需要和path配置使用 :set path+=app/**查找path下所有的子目录
    :t{char} 跳转到该字符前面 dt{ 删除到{之前
    :T{char} 跳转到该字符后面

自动补全
~~~~~~~~~~~~~~

+------------+------------------+
| <C-n>      | 普通关键字       |
+============+==================+
| <C-x><C-n> | 当前缓冲区关键字 |
+------------+------------------+
| <C-x><C-i> | 包含文件关键字   |
+------------+------------------+
| <C-x><C-]> | 标签文件关键字   |
+------------+------------------+
| <C-x><C-k> | 字典查找         |
+------------+------------------+
| <C-x><C-l> | 整行补全         |
+------------+------------------+
| <C-x><C-f> | 文件名补全       |
+------------+------------------+
| <C-x><C-o> | 全能(Omni)补全   |
+------------+------------------+

拼写检查
~~~~~~~~~~~~~~~

开启命令： ``:set spell``

+-----+-----------------------------------+
| ]s  | 跳到下一处拼写错误                |
+=====+===================================+
| [s  | 跳到上一处拼写错误                |
+-----+-----------------------------------+
| z=  | 为当前单词提供更正建议            |
+-----+-----------------------------------+
| zg  | 把当前单词添加到拼写文件中        |
+-----+-----------------------------------+
| zw  | 把当前单词从拼写文件中删除        |
+-----+-----------------------------------+
| zug | 撤销针对当前单词的 zg 或 zw 命令] |
+-----+-----------------------------------+

其他
~~~~

::

    * 文本行尾
        ^M 是由于在linux下打开了用window系统编辑的文本文件，在window下的换行符是\r\n,在linux下的换行符是\n
    * 编辑后使用sudo命令保存
        :w !sudo tee %
    * daw  删除当前单词
    * viw  选择一个单词
    * <C-g> 可视及选择切换,但如果选择模式下输入任意字符,会替换内容并切换插入模式
    * <C-r>= 调用表达式寄存器
    * :%s/str//gn   统计字符串str数量

插件的使用
~~~~~~~~~~

::

    * Nerdtree快捷键
         h j k l移动光标定位
         ctrl+w+w 光标在左右窗口切换
         ctrl+w+r 切换当前窗口左右布局
         ctrl+p 模糊搜索文件
         gT 切换到前一个tab
         g t 切换到后一个tab
         
         o 打开关闭文件或者目录，如果是文件的话，光标出现在打开的文件中
         O 打开结点下的所有目录
         X 合拢当前结点的所有目录
         x 合拢当前结点的父目录

         i和s水平分割或纵向分割窗口打开文件
         u 打开上层目录
         t 在标签页中打开
         T 在后台标签页中打开

         p 到上层目录
         P 到根目录
         K 到同目录第一个节点
         J 到同目录最后一个节点
         m 显示文件系统菜单（添加、删除、移动操作）
         ? 帮助
         :q 关闭

    * minibufexpl快捷键
         :e <filename>  打开文件
         :ls            当前打开的buf
         :bn            下一个buf
         :bp            前一个buf
         :b<n>          n是数字，第n个buf
         :b<tab>        自动补齐
         :bd            删除buf


